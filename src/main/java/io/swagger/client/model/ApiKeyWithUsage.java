/*
 * Talon.One API
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.ApiKey;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * ApiKeyWithUsage
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-02-06T13:17:26.027+01:00")
public class ApiKeyWithUsage {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("created")
  private OffsetDateTime created = null;

  @SerializedName("modified")
  private OffsetDateTime modified = null;

  @SerializedName("accountId")
  private Integer accountId = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("roleId")
  private Integer roleId = null;

  @SerializedName("applicationId")
  private Integer applicationId = null;

  @SerializedName("token")
  private String token = null;

  @SerializedName("usageCount")
  private Integer usageCount = null;

  @SerializedName("lastUsed")
  private OffsetDateTime lastUsed = null;

  public ApiKeyWithUsage id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Unique ID for this entity.
   * @return id
  **/
  @ApiModelProperty(required = true, value = "Unique ID for this entity.")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public ApiKeyWithUsage created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

   /**
   * The exact moment this entity was created.
   * @return created
  **/
  @ApiModelProperty(required = true, value = "The exact moment this entity was created.")
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }

  public ApiKeyWithUsage modified(OffsetDateTime modified) {
    this.modified = modified;
    return this;
  }

   /**
   * The exact moment this entity was last modified.
   * @return modified
  **/
  @ApiModelProperty(required = true, value = "The exact moment this entity was last modified.")
  public OffsetDateTime getModified() {
    return modified;
  }

  public void setModified(OffsetDateTime modified) {
    this.modified = modified;
  }

  public ApiKeyWithUsage accountId(Integer accountId) {
    this.accountId = accountId;
    return this;
  }

   /**
   * The ID of the account that owns this entity.
   * @return accountId
  **/
  @ApiModelProperty(required = true, value = "The ID of the account that owns this entity.")
  public Integer getAccountId() {
    return accountId;
  }

  public void setAccountId(Integer accountId) {
    this.accountId = accountId;
  }

  public ApiKeyWithUsage name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of this API key.
   * @return name
  **/
  @ApiModelProperty(required = true, value = "The name of this API key.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ApiKeyWithUsage description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A longer description of the API key.
   * @return description
  **/
  @ApiModelProperty(value = "A longer description of the API key.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ApiKeyWithUsage roleId(Integer roleId) {
    this.roleId = roleId;
    return this;
  }

   /**
   * ID of the role to be used.
   * @return roleId
  **/
  @ApiModelProperty(required = true, value = "ID of the role to be used.")
  public Integer getRoleId() {
    return roleId;
  }

  public void setRoleId(Integer roleId) {
    this.roleId = roleId;
  }

  public ApiKeyWithUsage applicationId(Integer applicationId) {
    this.applicationId = applicationId;
    return this;
  }

   /**
   * ID of the application to be used for integration requests.
   * @return applicationId
  **/
  @ApiModelProperty(value = "ID of the application to be used for integration requests.")
  public Integer getApplicationId() {
    return applicationId;
  }

  public void setApplicationId(Integer applicationId) {
    this.applicationId = applicationId;
  }

  public ApiKeyWithUsage token(String token) {
    this.token = token;
    return this;
  }

   /**
   * Token for the API Key.
   * @return token
  **/
  @ApiModelProperty(required = true, value = "Token for the API Key.")
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }

  public ApiKeyWithUsage usageCount(Integer usageCount) {
    this.usageCount = usageCount;
    return this;
  }

   /**
   * Number of times the API key was used.
   * @return usageCount
  **/
  @ApiModelProperty(required = true, value = "Number of times the API key was used.")
  public Integer getUsageCount() {
    return usageCount;
  }

  public void setUsageCount(Integer usageCount) {
    this.usageCount = usageCount;
  }

  public ApiKeyWithUsage lastUsed(OffsetDateTime lastUsed) {
    this.lastUsed = lastUsed;
    return this;
  }

   /**
   * Timestamp of the last usage of the API key.
   * @return lastUsed
  **/
  @ApiModelProperty(required = true, value = "Timestamp of the last usage of the API key.")
  public OffsetDateTime getLastUsed() {
    return lastUsed;
  }

  public void setLastUsed(OffsetDateTime lastUsed) {
    this.lastUsed = lastUsed;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiKeyWithUsage apiKeyWithUsage = (ApiKeyWithUsage) o;
    return Objects.equals(this.id, apiKeyWithUsage.id) &&
        Objects.equals(this.created, apiKeyWithUsage.created) &&
        Objects.equals(this.modified, apiKeyWithUsage.modified) &&
        Objects.equals(this.accountId, apiKeyWithUsage.accountId) &&
        Objects.equals(this.name, apiKeyWithUsage.name) &&
        Objects.equals(this.description, apiKeyWithUsage.description) &&
        Objects.equals(this.roleId, apiKeyWithUsage.roleId) &&
        Objects.equals(this.applicationId, apiKeyWithUsage.applicationId) &&
        Objects.equals(this.token, apiKeyWithUsage.token) &&
        Objects.equals(this.usageCount, apiKeyWithUsage.usageCount) &&
        Objects.equals(this.lastUsed, apiKeyWithUsage.lastUsed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, created, modified, accountId, name, description, roleId, applicationId, token, usageCount, lastUsed);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiKeyWithUsage {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    roleId: ").append(toIndentedString(roleId)).append("\n");
    sb.append("    applicationId: ").append(toIndentedString(applicationId)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    usageCount: ").append(toIndentedString(usageCount)).append("\n");
    sb.append("    lastUsed: ").append(toIndentedString(lastUsed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

