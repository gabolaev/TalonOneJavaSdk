/*
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package one.talon.api.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.threeten.bp.OffsetDateTime;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * 
 */
@ApiModel(description = "")

public class User {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("created")
  private OffsetDateTime created = null;

  @SerializedName("modified")
  private OffsetDateTime modified = null;

  @SerializedName("email")
  private String email = null;

  @SerializedName("accountId")
  private Integer accountId = null;

  @SerializedName("inviteToken")
  private String inviteToken = null;

  /**
   * Current user state.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    INVITED("invited"),
    
    ACTIVE("active"),
    
    DEACTIVATED("deactivated");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("state")
  private StateEnum state = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("lastActivity")
  private OffsetDateTime lastActivity = null;

  @SerializedName("policy")
  private Map<String, Policy> policy = new HashMap<String, Policy>();

  @SerializedName("releaseUpdate")
  private Boolean releaseUpdate = null;

  public User id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Unique ID for this entity.
   * @return id
  **/
  @ApiModelProperty(required = true, value = "Unique ID for this entity.")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public User created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

   /**
   * The exact moment this entity was created.
   * @return created
  **/
  @ApiModelProperty(required = true, value = "The exact moment this entity was created.")
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }

  public User modified(OffsetDateTime modified) {
    this.modified = modified;
    return this;
  }

   /**
   * The exact moment this entity was last modified.
   * @return modified
  **/
  @ApiModelProperty(required = true, value = "The exact moment this entity was last modified.")
  public OffsetDateTime getModified() {
    return modified;
  }

  public void setModified(OffsetDateTime modified) {
    this.modified = modified;
  }

  public User email(String email) {
    this.email = email;
    return this;
  }

   /**
   * The email address associated with your account.
   * @return email
  **/
  @ApiModelProperty(required = true, value = "The email address associated with your account.")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public User accountId(Integer accountId) {
    this.accountId = accountId;
    return this;
  }

   /**
   * The ID of the account that owns this entity.
   * @return accountId
  **/
  @ApiModelProperty(required = true, value = "The ID of the account that owns this entity.")
  public Integer getAccountId() {
    return accountId;
  }

  public void setAccountId(Integer accountId) {
    this.accountId = accountId;
  }

  public User inviteToken(String inviteToken) {
    this.inviteToken = inviteToken;
    return this;
  }

   /**
   * Invite token, empty if the user as already accepted their invite.
   * @return inviteToken
  **/
  @ApiModelProperty(required = true, value = "Invite token, empty if the user as already accepted their invite.")
  public String getInviteToken() {
    return inviteToken;
  }

  public void setInviteToken(String inviteToken) {
    this.inviteToken = inviteToken;
  }

  public User state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * Current user state.
   * @return state
  **/
  @ApiModelProperty(required = true, value = "Current user state.")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public User name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Full name
   * @return name
  **/
  @ApiModelProperty(required = true, value = "Full name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public User lastActivity(OffsetDateTime lastActivity) {
    this.lastActivity = lastActivity;
    return this;
  }

   /**
   * Last time user used management API
   * @return lastActivity
  **/
  @ApiModelProperty(value = "Last time user used management API")
  public OffsetDateTime getLastActivity() {
    return lastActivity;
  }

  public void setLastActivity(OffsetDateTime lastActivity) {
    this.lastActivity = lastActivity;
  }

  public User policy(Map<String, Policy> policy) {
    this.policy = policy;
    return this;
  }

  public User putPolicyItem(String key, Policy policyItem) {
    this.policy.put(key, policyItem);
    return this;
  }

   /**
   * Access policy for the user as json object.
   * @return policy
  **/
  @ApiModelProperty(required = true, value = "Access policy for the user as json object.")
  public Map<String, Policy> getPolicy() {
    return policy;
  }

  public void setPolicy(Map<String, Policy> policy) {
    this.policy = policy;
  }

  public User releaseUpdate(Boolean releaseUpdate) {
    this.releaseUpdate = releaseUpdate;
    return this;
  }

   /**
   * Update the user via email
   * @return releaseUpdate
  **/
  @ApiModelProperty(required = true, value = "Update the user via email")
  public Boolean isReleaseUpdate() {
    return releaseUpdate;
  }

  public void setReleaseUpdate(Boolean releaseUpdate) {
    this.releaseUpdate = releaseUpdate;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User user = (User) o;
    return Objects.equals(this.id, user.id) &&
        Objects.equals(this.created, user.created) &&
        Objects.equals(this.modified, user.modified) &&
        Objects.equals(this.email, user.email) &&
        Objects.equals(this.accountId, user.accountId) &&
        Objects.equals(this.inviteToken, user.inviteToken) &&
        Objects.equals(this.state, user.state) &&
        Objects.equals(this.name, user.name) &&
        Objects.equals(this.lastActivity, user.lastActivity) &&
        Objects.equals(this.policy, user.policy) &&
        Objects.equals(this.releaseUpdate, user.releaseUpdate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, created, modified, email, accountId, inviteToken, state, name, lastActivity, policy, releaseUpdate);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");

    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    inviteToken: ").append(toIndentedString(inviteToken)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    lastActivity: ").append(toIndentedString(lastActivity)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    releaseUpdate: ").append(toIndentedString(releaseUpdate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

