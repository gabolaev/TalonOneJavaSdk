/*
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package one.talon.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import one.talon.api.model.AccessControlList;

/**
 * 
 */
@ApiModel(description = "")

public class UpdateUser {
  @SerializedName("email")
  private String email = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("password")
  private String password = null;

  @SerializedName("newPassword")
  private String newPassword = null;

  @SerializedName("policy")
  private AccessControlList policy = null;

  /**
   * New state (\&quot;deactivated\&quot; or \&quot;active\&quot;) for the user. Only usable by admins for the user.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    DEACTIVATED("deactivated"),
    
    ACTIVE("active");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("state")
  private StateEnum state = null;

  @SerializedName("releaseUpdate")
  private Boolean releaseUpdate = null;

  public UpdateUser email(String email) {
    this.email = email;
    return this;
  }

   /**
   * The email address associated with your account.
   * @return email
  **/
  @ApiModelProperty(required = true, value = "The email address associated with your account.")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public UpdateUser name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Your name.
   * @return name
  **/
  @ApiModelProperty(value = "Your name.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public UpdateUser password(String password) {
    this.password = password;
    return this;
  }

   /**
   * Your old password.
   * @return password
  **/
  @ApiModelProperty(value = "Your old password.")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public UpdateUser newPassword(String newPassword) {
    this.newPassword = newPassword;
    return this;
  }

   /**
   * Your new password.
   * @return newPassword
  **/
  @ApiModelProperty(value = "Your new password.")
  public String getNewPassword() {
    return newPassword;
  }

  public void setNewPassword(String newPassword) {
    this.newPassword = newPassword;
  }

  public UpdateUser policy(AccessControlList policy) {
    this.policy = policy;
    return this;
  }

   /**
   * Get policy
   * @return policy
  **/
  @ApiModelProperty(value = "")
  public AccessControlList getPolicy() {
    return policy;
  }

  public void setPolicy(AccessControlList policy) {
    this.policy = policy;
  }

  public UpdateUser state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * New state (\&quot;deactivated\&quot; or \&quot;active\&quot;) for the user. Only usable by admins for the user.
   * @return state
  **/
  @ApiModelProperty(value = "New state (\"deactivated\" or \"active\") for the user. Only usable by admins for the user.")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public UpdateUser releaseUpdate(Boolean releaseUpdate) {
    this.releaseUpdate = releaseUpdate;
    return this;
  }

   /**
   * Update the user via email
   * @return releaseUpdate
  **/
  @ApiModelProperty(value = "Update the user via email")
  public Boolean isReleaseUpdate() {
    return releaseUpdate;
  }

  public void setReleaseUpdate(Boolean releaseUpdate) {
    this.releaseUpdate = releaseUpdate;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateUser updateUser = (UpdateUser) o;
    return Objects.equals(this.email, updateUser.email) &&
        Objects.equals(this.name, updateUser.name) &&
        Objects.equals(this.password, updateUser.password) &&
        Objects.equals(this.newPassword, updateUser.newPassword) &&
        Objects.equals(this.policy, updateUser.policy) &&
        Objects.equals(this.state, updateUser.state) &&
        Objects.equals(this.releaseUpdate, updateUser.releaseUpdate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, name, password, newPassword, policy, state, releaseUpdate);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateUser {\n");
    
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    newPassword: ").append(toIndentedString(newPassword)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    releaseUpdate: ").append(toIndentedString(releaseUpdate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

